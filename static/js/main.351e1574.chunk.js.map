{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","createGrid","grid","i","row","j","push","renderSquare","this","squares","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","slice","length","winner","calculateWinner","setState","concat","step","status","current","moves","map","move","desc","key","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"2PAIA,SAASA,EAAOC,GACd,OACE,4BAAQC,UAAU,SAASC,QAASF,EAAME,SACvCF,EAAMG,O,IAKPC,E,4MAWJC,WAAa,WAEX,IADA,IAAIC,EAAO,GACFC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAE1B,IADA,IAAIC,EAAM,GACDC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAAIE,KAAK,EAAKC,aAAiB,EAAJJ,EAAQE,IAErCH,EAAKI,KAAK,yBAAKT,UAAU,aAAcO,IAEzC,OAAOF,G,2DAnBIC,GAAI,IAAD,OACd,OACE,kBAACR,EAAD,CACEI,MAAOS,KAAKZ,MAAMa,QAAQN,GAC1BL,QAAS,kBAAM,EAAKF,MAAME,QAAQK,Q,+BAmBtC,OACE,6BACGK,KAAKP,kB,GA1BMS,IAAMC,WAgCpBC,E,kDACJ,WAAYhB,GAAQ,IAAD,8BACjB,cAAMA,IACDiB,MAAQ,CACXC,QAAS,CAAC,CACRL,QAASM,MAAM,GAAGC,KAAK,QAEzBC,WAAY,EACZC,SAAS,GAPM,E,wDAWPf,GACV,IAAMW,EAAUN,KAAKK,MAAMC,QAAQK,MAAM,EAAGX,KAAKK,MAAMI,WAAa,GAE9DR,EADUK,EAAQA,EAAQM,OAAS,GACjBX,QAAQU,QAC1BE,EAASC,EAAgBb,GAE1BY,IAAqB,GAAXA,GAAiBZ,EAAQN,KAGxCM,EAAQN,GAAKK,KAAKK,MAAMK,QAAU,IAAM,IACxCV,KAAKe,SAAS,CACZT,QAASA,EAAQU,OAAO,CAAC,CACvBf,QAASA,KAEXQ,WAAYH,EAAQM,OACpBF,SAAUV,KAAKK,MAAMK,a,6BAIlBO,GACLjB,KAAKe,SAAS,CACZN,WAAYQ,EACZP,QAAUO,EAAO,GAAM,M,+BAIjB,IAgBJC,EAhBG,OACDZ,EAAUN,KAAKK,MAAMC,QACrBa,EAAUb,EAAQN,KAAKK,MAAMI,YAC7BI,EAASC,EAAgBK,EAAQlB,SAEjCmB,EAAQd,EAAQe,KAAI,SAACJ,EAAMK,GAC/B,IAAMC,EAAOD,EACX,eAAiBA,EACjB,mBACF,OACE,wBAAIE,IAAKF,GACP,4BAAQhC,QAAS,kBAAM,EAAKmC,OAAOH,KAAQC,OAejD,OAPIL,EAFAL,GACa,GAAXA,EACO,WAAaA,EAEb,eAGF,iBAAmBb,KAAKK,MAAMK,QAAU,IAAM,KAGvD,yBAAKrB,UAAU,QACb,yBAAKA,UAAU,cACb,kBAACG,EAAD,CACES,QAASkB,EAAQlB,QACjBX,QAAS,SAACK,GAAD,OAAO,EAAK+B,YAAY/B,OAGrC,yBAAKN,UAAU,aACb,6BAAO6B,GACP,4BAAME,S,GA1EGlB,IAAMC,WAwFzB,SAASW,EAAgBb,GAavB,IAZA,IAAM0B,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAIAhC,EAAI,EAAGA,EAAIgC,EAAMf,OAAQjB,IAAK,CAAC,IAAD,cACnBgC,EAAMhC,GADa,GAC9BiC,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAI7B,EAAQ2B,IAAM3B,EAAQ2B,KAAO3B,EAAQ4B,IAAM5B,EAAQ2B,KAAO3B,EAAQ6B,GACpE,OAAO7B,EAAQ2B,GAKnB,IAAK,IAAIjC,EAAI,EAAGA,EAAI,EAAGA,IACrB,GAAkB,MAAdM,EAAQN,GACV,OAAO,KAKX,OAAQ,EAjCVoC,IAASC,OACP,kBAAC5B,EAAD,MACA6B,SAASC,eAAe,W","file":"static/js/main.351e1574.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n  return (\r\n    <button className=\"square\" onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nclass Board extends React.Component {\r\n  renderSquare(i) {\r\n    return (\r\n      <Square \r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n      />\r\n    );\r\n  }\r\n\r\n  // need to create children before assigning to parent\r\n  createGrid = () => {\r\n    let grid = [];\r\n    for (let i = 0; i < 3; i++) {\r\n      let row = [];\r\n      for (let j = 0; j < 3; j++) {\r\n        row.push(this.renderSquare(i * 3 + j));\r\n      }\r\n      grid.push(<div className=\"board-row\">{ row }</div>);\r\n    }\r\n    return grid;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.createGrid()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [{\r\n        squares: Array(9).fill(null),\r\n      }],\r\n      stepNumber: 0,\r\n      xIsNext: true,\r\n    };\r\n  }\r\n\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    const winner = calculateWinner(squares);\r\n\r\n    if ((winner && winner != -1) || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n    this.setState({\r\n      history: history.concat([{\r\n        squares: squares,\r\n      }]),\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext,\r\n    });\r\n  }\r\n\r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: (step % 2) == 0,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const winner = calculateWinner(current.squares);\r\n\r\n    const moves = history.map((step, move) => {\r\n      const desc = move ?\r\n        'Go to move #' + move :\r\n        'Go to game start';\r\n      return (\r\n        <li key={move}>\r\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n        </li>\r\n      )\r\n    });\r\n\r\n    let status;\r\n    if (winner) {\r\n      if (winner != -1) {\r\n        status = 'Winner: ' + winner;\r\n      } else {\r\n        status = 'It\\'s a draw!';\r\n      }\r\n    } else {\r\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n    }\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board \r\n            squares={current.squares}\r\n            onClick={(i) => this.handleClick(i)}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{ status }</div>\r\n          <ol>{ moves }</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n\r\n  // if board is at a winning state, return winner\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n\r\n  // if board still has empty squares, return null\r\n  for (let i = 0; i < 9; i++) {\r\n    if (squares[i] == null) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // else, game is a draw, so return -1\r\n  return -1;\r\n}"],"sourceRoot":""}